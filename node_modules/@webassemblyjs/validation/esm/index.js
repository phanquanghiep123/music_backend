function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import importOrderValidate from "./import-order";
import typeChecker from "./type-checker";
export default function validateAST(ast) {
  var errors = [];
  errors.push.apply(errors, _toConsumableArray(importOrderValidate(ast)));
  errors.push.apply(errors, _toConsumableArray(typeChecker(ast)));

  if (errors.length !== 0) {
    var errorMessage = "Validation errors:\n" + errors.join("\n");
    throw new Error(errorMessage);
  }
}
export { isConst } from "./is-const";
export { getType, typeEq } from "./type-inference";
export var stack = typeChecker;